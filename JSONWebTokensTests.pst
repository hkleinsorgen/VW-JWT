<?xml version="1.0"?>

<st-source>
<!-- 
Name: JSONWebTokensTests
Notice: Licensed under the MIT license

Copyright (c) 2017 intelligent views GmbH

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Comment: JSON Web Tokens Implementation
See https://jwt.io/

Contact: hkleinsorgen - at - i-views.com
Github repo: https://github.com/hkleinsorgen/VW-JWT

Licensed under the MIT license (see Copyright)
DevelopmentPrerequisites: #(#(#any 'JSONWebTokens' '') #(#any 'Xtreams-Crypto' '') #(#any 'SUnit' ''))
KSignature: #('definedClasses' 2 'definedClassesHash' 4904698060 'extendedClasses' 0 'extendedClassesHash' 0)
KSignatureV2: #('definedClasses' 2 'definedClassesHash' 417604643003417758608055194848329245715944480140 'extendedClasses' 0 'extendedClassesHash' 1245845410931227995499360226027473197403882391305)
PackageName: JSONWebTokensTests
Parcel: #('JSONWebTokensTests')
ParcelDirectory: JSONWebTokensTests
PrerequisiteDescriptions: #(#(#name 'JSONWebTokens' #componentType #package) #(#name 'Xtreams-Crypto' #componentType #package) #(#name 'SUnit' #componentType #package))
PrerequisiteParcels: #(#('JSONWebTokens' '') #('Xtreams-Crypto' '') #('SUnit' ''))
Version: (8.3).3
Date: 10:51:45 PM March 9, 2020
 -->
<time-stamp>From VisualWorks®, 8.3.2 of 16. November 2018 on 9. März 2020 at 22:51:45</time-stamp>


<do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it>

<class>
<name>SignTest</name>
<environment>JWT</environment>
<super>XProgramming.SUnit.TestCase</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JSONWebTokensTests</package>
</attributes>
</class>

<class>
<name>EncodingTest</name>
<environment>JWT</environment>
<super>XProgramming.SUnit.TestCase</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JSONWebTokensTests</package>
</attributes>
</class>

<methods>
<class-id>JWT.SignTest</class-id> <category>tests</category>

<body package="JSONWebTokensTests">testVerify	| key token encodedToken |	key := 'ofvxYwbzBtiTUlEmATlZKXWcBHvuvOiGKeMBUsPCR9UACNPuJ/H198HsjGGY+5iXATzovQ3ZB88X+aR6LJm/9UR4D/cMZhbd80cPRN5J2WpelcVAM4SUNedbdHLMIQXnWGqDpNeY0XNpiHUajBiP1RhP3IrFWssaTuMw44dhEYd6MYk5DA5oRsaIAnUeFbhhk3LLwmJK4KUEUqwH+q0I6sZTjRd5b4oxifRYZA7NZS8DSxPkf6RPBm3HH4lsaAmmSaUxq8gYfiCjPT377bp9gZd5rjeRniS3tkOlpO8O+0t8WVMKcDn4JjhyN9Ys6gFVKe0ZqY8RvGMsgflaOVIXmg=='.	encodedToken := 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.6zLGMHPTPIKE3sE20049SLp7AOiNWSK1_bDhTTxT4-A'.	token := JWT.Token fromEncodedToken: encodedToken.	" should not raise an exception "	token verifyHS256: key.</body>
</methods>

<methods>
<class-id>JWT.EncodingTest</class-id> <category>tests</category>

<body package="JSONWebTokensTests">testDecode	| bytes expectedBytes |	bytes := Token decodeBase64AsBytes: 'ofvxYwbzBtiTUlEmATlZKXWcBHvuvOiGKeMBUsPCR9UACNPuJ/H198HsjGGY+5iXATzovQ3ZB88X+aR6LJm/9UR4D/cMZhbd80cPRN5J2WpelcVAM4SUNedbdHLMIQXnWGqDpNeY0XNpiHUajBiP1RhP3IrFWssaTuMw44dhEYd6MYk5DA5oRsaIAnUeFbhhk3LLwmJK4KUEUqwH+q0I6sZTjRd5b4oxifRYZA7NZS8DSxPkf6RPBm3HH4lsaAmmSaUxq8gYfiCjPT377bp9gZd5rjeRniS3tkOlpO8O+0t8WVMKcDn4JjhyN9Ys6gFVKe0ZqY8RvGMsgflaOVIXmg=='.	expectedBytes := (ByteArray fromPackedString: '(_/1X0[3A-"ST%D&amp;@S%YJWV\AG/./N"FJ^LAT,OBQ=T@BMO.I?G5=&lt;G,#FFX&gt;9"W@S3(/P7YA&lt;&lt;W&gt;ZQ:KI&amp;?=TQ8C?\LY![]&lt;4\OQM9I6V)^%\U@L8RTM^][]GKLHPW''VF*C)M^X4WM)"GTZ#A"O5Q!O7H+EV,,ZS.L088]!DX]:LX$9C@9(Q,ZH@''T^E[!!$7KK0&amp;IJ8JTDT*0G&gt;*4H:,YS#Q]9[8(1"_QXY@;MYR&lt;CR1O$_:QOA&amp;7GG8%,Z@&amp;&amp;RZT1*&lt; X_"B#OS7;;[)= Y]9+#^Q''"R7-$N%)N&lt;N&gt;4-&lt;VULJ\C''8I#!2M=X,: EUJ^4Y*X&lt;Q/FL, _%ZNUHW&amp; @a').	self assert: expectedBytes equals: bytes.</body>
</methods>

<methods>
<class-id>JWT.SignTest</class-id> <category>tests</category>

<body package="JSONWebTokensTests">testExpired	| key payload encodedToken |	key := self symmetricKey256.	payload := Dictionary new.	payload at: Token keyExpiry put: ( Timestamp nowUTC - 1 seconds ) jwtValue.	encodedToken := ( Token payload: payload ) signWithKey: key.	[	( Token fromEncodedToken: encodedToken ) verifyWithKey: key.		self signalFailure: 'Expiry failure expected'	] on: TokenError do: [: ex | self assert: ( '*expir*' match: ex description )].</body>

<body package="JSONWebTokensTests">testInvalidTokenSyntax	#(		'thisisnotatoken'		'this.is~not.a~token'		'this.isnotatoken'	) do: [ : string |		[	Token fromEncodedToken: string.			self signalFailure: ('Token error expected for "&lt;1s&gt;"' expandMacrosWith: string )		] on: TokenError do: [: ex | ].	]</body>

<body package="JSONWebTokensTests">testNotExpired	| key payload encodedToken |	key := self symmetricKey256.	payload := Dictionary new.	payload at: Token keyExpiry put: ( Timestamp nowUTC + 2 seconds ) jwtValue.	encodedToken := ( Token payload: payload ) signWithKey: key.	( Token fromEncodedToken: encodedToken ) verifyWithKey: key.</body>

<body package="JSONWebTokensTests">testPayloadGet	| token |	token := Token new.	token payloadAt: 'testClaim' put: 'testValue'.	self assert: (token payloadAt: 'testClaim' ifAbsent: [ nil ]) = 'testValue'.	self assert: (token payloadAt: #testClaim ifAbsent: [ nil ]) = 'testValue'.</body>

<body package="JSONWebTokensTests">testPayloadImmutable	| token |	token := Token new.	[	token payloadObject at: 'testClaim' put: 'dirtyWrite'.		self signalFailure: 'Payload object should be immutable'	] on: NoModificationError do: [: ex |  ].</body>

<body package="JSONWebTokensTests">testPayloadModify	| token |	token := Token new.	token payloadAt: 'testClaim' put: 'testValue'.	self assert: token payload = '{"testClaim": "testValue"}'.	token payloadAt: 'testClaim' put: 'modifiedValue'.	self assert: token payload = '{"testClaim": "modifiedValue"}'.</body>

<body package="JSONWebTokensTests">testSignHS256	self privateTestSignSymmetric: 'HS256' expected: self defaultTokenHS256.</body>

<body package="JSONWebTokensTests">testSignHS384	self privateTestSignSymmetric: 'HS384' key: self symmetricKey384 expected: self defaultTokenHS384.</body>

<body package="JSONWebTokensTests">testSignHS512	self privateTestSignSymmetric: 'HS512' expected: self defaultTokenHS512.</body>

<body package="JSONWebTokensTests">testSignRS256	self privateTestSignRSA: 'RS256' expected: self defaultTokenRS256</body>

<body package="JSONWebTokensTests">testSignRS384	self privateTestSignRSA: 'RS384' expected: self defaultTokenRS384</body>

<body package="JSONWebTokensTests">testSignRS512	self privateTestSignRSA: 'RS512' expected: self defaultTokenRS512</body>

<body package="JSONWebTokensTests">testValidTokenSyntax	#(		'header.playload.signature'	) do: [ : encodedToken |		[	Token fromEncodedToken: encodedToken.					] on: TokenError do: [: ex | 			self signalFailure: ('Token error "&lt;1s&gt; for "&lt;2s&gt;" not expected' expandMacrosWith: ex description with: encodedToken )		].	]</body>

<body package="JSONWebTokensTests">testVerifyFail	| key |	key := #[102 138 107 68 133 17 249 74 251 241 124 13 163 153 201 230 124 82 67 161 214 83 172 119 84 113 74 38 229 14 244 205].	#(		'header.playload.signature'		'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoidGVzdGVyIn0.LaZfDt2tuvyLFBDWo3PIMt4qrgAF9i0h6otk3rpyvjI'	) do: 		[: encodedToken | | token |			token := Token fromEncodedToken: encodedToken.			[	token verifyWithKey: key.				self signalFailure: 'Verification failure expected'			] on: TokenError do: [: ex | ]		].</body>

<body package="JSONWebTokensTests">testVerifyFailHS256	| token |	token := Token fromEncodedToken: self defaultTokenHS256.	self assertToken: token hasHeader: ( self headerForAlg: 'HS256' ) payload: self defaultPayload.	( Array with: #[ ] with: ( Xtreams.SecureRandom reading read: 32 )) do: 		[: wrongKey |						[	token verifyWithKey: #[ ].				self signalFailure: 'Verification failure expected'			] on: TokenError do: [: ex | ]		].</body>

<body package="JSONWebTokensTests">testVerifyHS256	self privateVerifySymmetricToken: self defaultTokenHS256 algorithm: 'HS256'</body>

<body package="JSONWebTokensTests">testVerifyHS384	self privateVerifySymmetricToken: self defaultTokenHS384 key: self symmetricKey384  algorithm: 'HS384'</body>

<body package="JSONWebTokensTests">testVerifyHS512	self privateVerifySymmetricToken: self defaultTokenHS512 algorithm: 'HS512'</body>

<body package="JSONWebTokensTests">testVerifyRS256	self privateVerifyRSAToken: self defaultTokenRS256 algorithm: 'RS256'</body>

<body package="JSONWebTokensTests">testVerifyRS384	self privateVerifyRSAToken: self defaultTokenRS384 algorithm: 'RS384'</body>

<body package="JSONWebTokensTests">testVerifyRS512	self privateVerifyRSAToken: self defaultTokenRS512 algorithm: 'RS512'</body>
</methods>

<methods>
<class-id>JWT.SignTest</class-id> <category>private</category>

<body package="JSONWebTokensTests">assertToken: expectedToken equals: actualToken	self assert: expectedToken = actualToken</body>

<body package="JSONWebTokensTests">assertToken: token hasHeader: header payload: payload	self assert: token payloadObject = (JWTJson decode: payload).	self assert: token headerObject = (JWTJson decode: header).</body>

<body package="JSONWebTokensTests">headerForAlg: alg	^ '{"alg":"', alg, '","typ":"JWT"}'</body>

<body package="JSONWebTokensTests">privateTestSignRSA: algorithm expected: expectedToken 	| payload encodedToken |	payload := self defaultPayload.	encodedToken := ( Token payload: payload ) signWithKey: self privateRSAKey algorithm: algorithm.	self assertToken: expectedToken equals: encodedToken.	( Token fromEncodedToken: encodedToken ) verifyWithKey: self publicRSACert algorithm: algorithm.</body>

<body package="JSONWebTokensTests">privateTestSignSymmetric: algorithm expected: expectedToken 	self privateTestSignSymmetric: algorithm key: self symmetricKey256 expected: expectedToken</body>

<body package="JSONWebTokensTests">privateTestSignSymmetric: algorithm key: key expected: expectedToken 	| payload encodedToken |	payload := self defaultPayload.	encodedToken := ( Token payload: payload ) signWithKey: key algorithm: algorithm.	self assertToken: expectedToken equals: encodedToken.	( Token fromEncodedToken: encodedToken ) verifyWithKey: key algorithm: algorithm.</body>

<body package="JSONWebTokensTests">privateVerifyRSAToken: encodedToken algorithm: algorithm	| token |	token := Token fromEncodedToken: encodedToken.	self assertToken: token hasHeader: ( self headerForAlg: algorithm ) payload: self defaultPayload.	token verifyWithKey: self publicRSACert algorithm: algorithm.</body>

<body package="JSONWebTokensTests">privateVerifySymmetricToken: encodedToken algorithm: algorithm	self privateVerifySymmetricToken: encodedToken key: self symmetricKey256  algorithm: algorithm</body>

<body package="JSONWebTokensTests">privateVerifySymmetricToken: encodedToken key: key algorithm: algorithm	| token |	token := Token fromEncodedToken: encodedToken.	self assertToken: token hasHeader: ( self headerForAlg: algorithm ) payload: self defaultPayload.	token verifyWithKey: key algorithm: algorithm.</body>
</methods>

<methods>
<class-id>JWT.SignTest</class-id> <category>constants</category>

<body package="JSONWebTokensTests">defaultPayload	^ '{"http://www.i-views.com/jwt/isAdmin": true, "test": "passed"}'</body>

<body package="JSONWebTokensTests">defaultTokenHS256	" verified with the online debgugger https://jwt.io/#debugger-io  "	^ 'eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJodHRwOi8vd3d3Lmktdmlld3MuY29tL2p3dC9pc0FkbWluIjogdHJ1ZSwgInRlc3QiOiAicGFzc2VkIn0.cxOfcm1g7e9k3Q_a-qkVsGDAKf0Kz5GTtgJ8_wxY674'</body>

<body package="JSONWebTokensTests">defaultTokenHS384	" verified with the online debgugger https://jwt.io/#debugger-io  "	^ 'eyJhbGciOiAiSFMzODQiLCAidHlwIjogIkpXVCJ9.eyJodHRwOi8vd3d3Lmktdmlld3MuY29tL2p3dC9pc0FkbWluIjogdHJ1ZSwgInRlc3QiOiAicGFzc2VkIn0.3oa-TPY6GUiuPgU2Jw0LHX7r5IQcRBmj25D2-PcWS-KbFVLkll5r3q7wfygyd9DY'</body>

<body package="JSONWebTokensTests">defaultTokenHS512	" verified with the online debgugger https://jwt.io/#debugger-io  "	^ 'eyJhbGciOiAiSFM1MTIiLCAidHlwIjogIkpXVCJ9.eyJodHRwOi8vd3d3Lmktdmlld3MuY29tL2p3dC9pc0FkbWluIjogdHJ1ZSwgInRlc3QiOiAicGFzc2VkIn0.uJt3qDCkQ9FgXFzDcsC6GtXudlPPPiBcLFwy_LqW1SLZM9sS8tBPCAs7LKugjF5FqTDr1Ql40oFEMQcBZzg_mQ'</body>

<body package="JSONWebTokensTests">defaultTokenRS256	" verified with the online debgugger https://jwt.io/#debugger-io  "	^ 'eyJhbGciOiAiUlMyNTYiLCAidHlwIjogIkpXVCJ9.eyJodHRwOi8vd3d3Lmktdmlld3MuY29tL2p3dC9pc0FkbWluIjogdHJ1ZSwgInRlc3QiOiAicGFzc2VkIn0.tszEmqHx0YcnECTJyC4FPff9MHPALaNyhl2P4CsuIGmuaMbftRRC78DXIzzkadnKa0gzTrbd6Fl-aR_7dLTssPhqUvR3cbQx5GmDqGg1j_ZJmJ-oKBTNHTBdSUoXQUc17Is7WZ2VS9bMaizuafu6Gpll8AkX9bPyzVKS44jXY6I'</body>

<body package="JSONWebTokensTests">defaultTokenRS384	" verified with the online debgugger https://jwt.io/#debugger-io  "	^ 'eyJhbGciOiAiUlMzODQiLCAidHlwIjogIkpXVCJ9.eyJodHRwOi8vd3d3Lmktdmlld3MuY29tL2p3dC9pc0FkbWluIjogdHJ1ZSwgInRlc3QiOiAicGFzc2VkIn0.RkAMCStJnaXzRjNR5nb8xHX_7NFgeT_xnednPi4z5oEHWxVuEI5ppNP7hkaJt5Ou-H0gMReq3wugVQdbucHX9sAncwk_9EIgFEGqWehTKfWos314JuaniKa5q-WQltSY8jH6kOg7WAz0r4eWOVAAH9d7m7L_Ml65hR6GXOJXTOc'</body>

<body package="JSONWebTokensTests">defaultTokenRS512	" verified with the online debgugger https://jwt.io/#debugger-io  "	^ 'eyJhbGciOiAiUlM1MTIiLCAidHlwIjogIkpXVCJ9.eyJodHRwOi8vd3d3Lmktdmlld3MuY29tL2p3dC9pc0FkbWluIjogdHJ1ZSwgInRlc3QiOiAicGFzc2VkIn0.nxaLFR6GMs3zMHYqG3dhsW6mj996A1b4OIMzd37YupnRepHiWKwKFRPaREC0f5VG3NXmUOgEksYueiVWzyS0ORpqWD35rzieEp5IFZQTPZPxuyWfLxwD93Whe0hvhYmu8q3PyT-OO5O9RhfqIQUHgky2NlORMA2H_3fInjuDQL0'</body>

<body package="JSONWebTokensTests">privateRSAKey	^ '-----BEGIN RSA PRIVATE KEY-----MIICXQIBAAKBgQDW9TNL7DcAXGkM6UvZEaf+77k6b3MkCu8L4Ss5cvU/Zjg/Cqq4CfScEBK0ZqFlTndg0JD0fqQaCB9bH8DvNaI5mooibgx+Wdb4OVd/16HTxUC5x3XlaurD6vn0sDmWwJKKDMMouJCLg3OEQriyB5Cjls4yt2anR0ZfkSDBO0oehQIDAQABAoGADeuLCtudJDTXyLJC6yetjWDQyev1tNvQZyCJwAqlvxlLgymZrJlYcdLIo04SHZFbQbW/7VVWIylrfmcsA1Gh06K+AsxuFJrCh/mzc4AvftdIKdMTXg5pmzsm+CUPB2qBuK/D3X2qSs/F8OmXCMVKetHsWPxVR0WUkP3Hc8v9LAECQQDwhz9xclHhlfCbZEMBhE7xTqI5IQilLhBw//xi1Izz6jkEp0qnPOTtmtuhovO79ucEWSwgoUBvZszRB3yIBnfBAkEA5Mji1ujE6L5U0CvdyxOvXgTYYtQw31VVVK+ykffzRIGE0U36clXLIrWhqQzqMGGC4aXUmkD2O8YVYjacE/W3xQJAAiaTcKY/CS9YCWuqFbdjJVE4rh4Xf7Kbvwbq8M9Ju1yayendBwXKXj2GPTnByCp7AlTxyhDnDJf0uOHCQU0dgQJBANzzecfuA4V3k7d8NfaTa1EUwtonbY+y/PcNvBqm6SUnJNtzQMW9P7Kk0ZzPITlaYymDmyDiTiwKMMqqTPAl5bUCQQDZXESEDbjeQQOBez7+5gLwbh/t79E9smmtFaNkqLI/A7WgTkRnJ5YV4N50mncvQZBJBdZtQKH9bYc0uAGZDRch-----END RSA PRIVATE KEY-----'</body>

<body package="JSONWebTokensTests">publicRSACert	^ '-----BEGIN CERTIFICATE-----MIICFjCCAX8CAQIwDQYJKoZIhvcNAQEEBQAwYDEPMA0GA1UEChMGaXZpZXdzMRMwEQYDVQQHEwpNZXRyb3BvbGlzMREwDwYDVQQIEwhOZXcgWW9yazELMAkGA1UEBhMCVVMxGDAWBgNVBAMTD3Rlc3QuaS12aWV3cy5kZTAeFw0xMjA0MDYwODA5MDNaFw0yMjA0MDQwODA5MDNaMCsxDzANBgNVBAoTBml2aWV3czEYMBYGA1UEAxMPdGVzdC5pLXZpZXdzLmRlMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDW9TNL7DcAXGkM6UvZEaf+77k6b3MkCu8L4Ss5cvU/Zjg/Cqq4CfScEBK0ZqFlTndg0JD0fqQaCB9bH8DvNaI5mooibgx+Wdb4OVd/16HTxUC5x3XlaurD6vn0sDmWwJKKDMMouJCLg3OEQriyB5Cjls4yt2anR0ZfkSDBO0oehQIDAQABoxowGDAJBgNVHRMEAjAAMAsGA1UdDwQEAwIF4DANBgkqhkiG9w0BAQQFAAOBgQAF5IxJOa/J+QVRESFxofTO+cPfE/Tzd3BuC8eTrnt650y+JEHzXMVAAdXc4TEUZ9YwVBx94r2k710VXSg21+GCmVjArKUlgtjAYwRB4bSYdT5IsLx0Q1+e+QKvv13YCZaYt9GRgMocB9Qd/qlpthQmipVLucgLsz5ta0MRpg0x7g==-----END CERTIFICATE-----'</body>

<body package="JSONWebTokensTests">symmetricKey256	^ 'S5feBjkrGkDhY-xSfdcS19ANQWHh9wIfKu5-2hKD9BI'</body>

<body package="JSONWebTokensTests">symmetricKey384	^ 'nWZCqmP_ts0E-FLqKxmdV3vBMT0cowpcCiOLViuASeI0L6mVAB7O0wFKcF8Ak99t'</body>
</methods>

<methods>
<class-id>JWT.EncodingTest</class-id> <category>tests</category>

<body package="JSONWebTokensTests">testEncoding	| string encoded decoded |	string := '{		"test": "passed"	}'.	encoded := (Token encodeBase64String: string).	self assert: encoded ~= string.	decoded := Token decodeBase64AsString: encoded.	self assert: decoded = string.</body>

<body package="JSONWebTokensTests">testEncodingRandom	| random stream string encoded decoded |	random := Random fromGenerator: 1 seededWith: 17.	10 timesRepeat: 		[	stream := String new writeStream.			100 timesRepeat: 				[	stream nextPut: ( Character codePoint: ( random next * 512 ) ceiling )				].			string := stream contents.			encoded := Token encodeBase64String: string.			self assert: encoded ~= string.			self deny: encoded last = $=.			self deny: (encoded includes: $/).			self deny: (encoded includes: $+).			decoded := Token decodeBase64AsString: encoded.			self assert: decoded = string		].</body>
</methods>

<do-it>"Imported Classes:"</do-it>

<do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it>

<class>
<name>TestCase</name>
<environment>XProgramming.SUnit</environment>
<super>XProgramming.SUnit.TestAsserter</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>assertCounter testSelector </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>SUnit</category>
<attributes>
<package>SUnit</package>
</attributes>
</class>

</st-source>
