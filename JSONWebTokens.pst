<?xml version="1.0"?>

<st-source>
<!-- 
Name: JSONWebTokens
Notice: Licensed under the MIT license

Copyright (c) 2017 intelligent views GmbH

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Comment: JSON Web Tokens Implementation
See https://jwt.io/

Contact: hkleinsorgen - at - i-views.com
Github repo: https://github.com/hkleinsorgen/VW-JWT

Licensed under the MIT license (see Copyright)
DevelopmentPrerequisites: #(#(#any 'Xtreams-Crypto' '') #(#any 'IV-HTTP-Extensions' '') #(#any 'JSON-Squeak' '') #(#any 'HTTP' ''))
KSignature: #('definedClasses' 3 'definedClassesHash' 7200866682 'extendedClasses' 4 'extendedClassesHash' 441602123)
KSignatureV2: #('definedClasses' 3 'definedClassesHash' 23864735524750795256161740188174986177663215923 'extendedClasses' 4 'extendedClassesHash' 95131330803007388525577715222266352070195034961)
PackageName: JSONWebTokens
Parcel: #($s "16r0073")
PrerequisiteDescriptions: #(#(#name 'Xtreams-Crypto' #componentType #package) #(#name 'IV-HTTP-Extensions' #componentType #package) #(#name 'JSON-Squeak' #componentType #package) #(#name 'HTTP' #componentType #package))
PrerequisiteParcels: #(#('Xtreams-Crypto' '') #('IV-HTTP-Extensions' '') #('JSON-Squeak' '') #('HTTP' ''))
Version: (8.1).11
Date: 6:15:04 PM May 31, 2019
 -->
<time-stamp>From VisualWorksÂ®, 8.3.2 of 16. November 2018 on 31. Mai 2019 at 18:15:04</time-stamp>


<do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it>

<name-space>
<name>JWT</name>
<environment>Smalltalk</environment>
<private>false</private>
<imports>
			private Xtreams.*
			private Smalltalk.*
			</imports>
<category></category>
<attributes>
<package>JSONWebTokens</package>
</attributes>
</name-space>

<class>
<name>TokenAuthentication</name>
<environment>JWT</environment>
<super>Net.HttpAuthentication</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JSONWebTokens</package>
</attributes>
</class>

<class>
<name>Token</name>
<environment>JWT</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>payload signature header payloadObject headerObject </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JSONWebTokens</package>
</attributes>
</class>

<class>
<name>TokenError</name>
<environment>JWT</environment>
<super>Core.Error</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category></category>
<attributes>
<package>JSONWebTokens</package>
</attributes>
</class>

<methods>
<class-id>JWT.Token</class-id> <category>signing - algorithms</category>

<body package="JSONWebTokens">signHS256: toSign key: secretKey	" HMAC using SHA-256 hash algorithm "		&lt;sign: 'HS256'&gt;		^ self sign: toSign secretKey: secretKey hash: 'SHA256'</body>

<body package="JSONWebTokens">signHS384: toSign key: secretKey	" HMAC using SHA-384 hash algorithm "	&lt;sign: 'HS384'&gt;		^ self sign: toSign secretKey: secretKey hash: 'SHA384'</body>

<body package="JSONWebTokens">signHS512: toSign key: secretKey	" HMAC using SHA-512 hash algorithm "	&lt;sign: 'HS512'&gt;		^ self sign: toSign secretKey: secretKey hash: 'SHA512'</body>

<body package="JSONWebTokens">signRS256: toSign key: privateKey 	" RSASSA using SHA-256 hash algorithm "	&lt;sign: 'RS256'&gt;		^ self sign: toSign privateKey: privateKey hash: #sha256 padding: self rsaPadding</body>

<body package="JSONWebTokens">signRS384: toSign key: privateKey 	" RSASSA using SHA-384 hash algorithm "	&lt;sign: 'RS384'&gt;		^ self sign: toSign privateKey: privateKey hash: #sha384 padding: self rsaPadding</body>

<body package="JSONWebTokens">signRS512: toSign key: privateKey 	" RSASSA using SHA-512 hash algorithm "	&lt;sign: 'RS512'&gt;		^ self sign: toSign privateKey: privateKey hash: #sha512 padding: self rsaPadding</body>
</methods>

<methods>
<class-id>JWT.Token</class-id> <category>verify - algorithms</category>

<body package="JSONWebTokens">verifyHS256: secretKey 	" HMAC using SHA-256 hash algorithm "	&lt;verify: 'HS256'&gt;		self verifyWithSecretKey: secretKey algorithm: 'HS256'</body>

<body package="JSONWebTokens">verifyHS384: secretKey 	" HMAC using SHA-384 hash algorithm "	&lt;verify: 'HS384'&gt;		self verifyWithSecretKey: secretKey algorithm: 'HS384'</body>

<body package="JSONWebTokens">verifyHS512: secretKey 	" HMAC using SHA-512 hash algorithm "	&lt;verify: 'HS512'&gt;		self verifyWithSecretKey: secretKey algorithm: 'HS512'</body>

<body package="JSONWebTokens">verifyRS256: publicKey 	" RSASSA using SHA-256 hash algorithm "	&lt;verify: 'RS256'&gt;		self verifyWithPublicKey: publicKey algorithm: #sha256 padding: self rsaPadding.</body>

<body package="JSONWebTokens">verifyRS384: publicKey 	" RSASSA using SHA-384 hash algorithm "	&lt;verify: 'RS384'&gt;		self verifyWithPublicKey: publicKey algorithm: #sha384 padding: self rsaPadding.</body>

<body package="JSONWebTokens">verifyRS512: publicKey 	" RSASSA using SHA-384 hash algorithm "	&lt;verify: 'RS512'&gt;		self verifyWithPublicKey: publicKey algorithm: #sha512 padding: self rsaPadding.</body>
</methods>

<methods>
<class-id>JWT.Token class</class-id> <category>private</category>

<body package="JSONWebTokens">algorithmPragmas	&lt;pragmas: #instance&gt;		^ #(sign: verify: )</body>
</methods>

<methods>
<class-id>JWT.TokenAuthentication</class-id> <category>private</category>

<body package="JSONWebTokens">key	^ self password</body>

<body package="JSONWebTokens">payload	| data |	data := Dictionary new.	data at: 'subj' put: self username.	^ JSON.Json render: data</body>
</methods>

<methods>
<class-id>JWT.TokenAuthentication</class-id> <category>authorization</category>

<body package="JSONWebTokens">setNewAuthorizationValue	" minimalisic client implementation "	self authValue data: (( Token payload: self payload ) signWithKey: self key ).	self setAuthorizedState.</body>
</methods>

<methods>
<class-id>JWT.TokenAuthentication class</class-id> <category>accessing</category>

<body package="JSONWebTokens">authenticationDataFromField: authField	^ authField valueOfScheme: self scheme</body>

<body package="JSONWebTokens">scheme	^'Bearer'</body>
</methods>

<methods>
<class-id>JWT.Token</class-id> <category>private</category>

<body package="JSONWebTokens">cacheObjectFromJson: json 	| obj |	obj := json notNil 			ifTrue: [ self parseJson: json ]			ifFalse: [ Dictionary new ].	obj beImmutable.	^ obj</body>

<body package="JSONWebTokens">defaultAlgorithm	^ self class defaultAlgorithm</body>

<body package="JSONWebTokens">hash: bytesToHash hashID: hashAlgorithmId 	| toSign |	toSign := self class encodeAsBytes: bytesToHash.	^ ( nil writing hashing: hashAlgorithmId asUppercase )		nextPutAll: toSign; close;		digest</body>

<body package="JSONWebTokens">messageToSign	| encodedPayload encodedHeader |	encodedHeader := self class encodeString: self header.	encodedPayload := self class encodeString: self payload.	^ encodedHeader , '.' , encodedPayload</body>

<body package="JSONWebTokens">parseJson: json	^ [ JSON.Json readFrom: json readStream ] 		on: JSON.JsonSyntaxError		do: [: ex | TokenError raiseSignal: ex description ]</body>

<body package="JSONWebTokens">raiseInvalidSignature	TokenError raiseSignal: 'Invalid token signature'.</body>

<body package="JSONWebTokens">readCertificateFrom: certificate	^ certificate isCharacters		ifTrue: [  self readKeyFrom: certificate ]		ifFalse: [ Security.X509.Certificate fromBytes: certificate ]</body>

<body package="JSONWebTokens">readKeyFrom: keyString 	^ [ | keys |		keys := Security.X509.CertificateFileReader new readFrom: keyString readStream.		keys size ~= 1 			ifTrue: [ TokenError raiseSignal: keys size printString , ' keys found' ].		keys first 	] on: Error do: [: ex | TokenError raiseSignal: 'Could not read key' ]</body>

<body package="JSONWebTokens">rsaPadding	^ 'PKCS1'</body>

<body package="JSONWebTokens">sign: toSign key: key algorithm: algorithmName 	| pragma |	pragma := ( Pragma allNamed: #sign: in: self class ) 			detect: [: p | ( p argumentAt: 1 ) = algorithmName ]			ifNone: [ TokenError raiseSignal: ( 'Unsupported algorithm: &lt;1s&gt;' expandMacrosWith: algorithmName )].	^ self perform: pragma selector with: toSign with: key</body>

<body package="JSONWebTokens">sign: toSign privateKey: privateKeyString hash: hashID padding: paddingName 	" Sign with the private key using the TLS algorithm selector "	| privateKey hashBytes  |	privateKey := self readKeyFrom: privateKeyString.	hashBytes := self hash: toSign hashID: hashID.	^ [ privateKey jwtSign: hashBytes hash: hashID padding: paddingName ] 		on: Error		do: [: ex | TokenError raiseSignal: 'Signing failed: ' , ex description ]</body>

<body package="JSONWebTokens">sign: toSign secretKey: secretKey hash: vwHashName	" Sign with the secret key  using the hash algorithm (VW name, not JWT name!) "	| keyBytes hash |	keyBytes := secretKey isCharacters 			ifTrue: [ self class decodeAsBytes: secretKey ]			ifFalse: [ secretKey ].	keyBytes size &lt; 32 		ifTrue: [ TokenError raiseSignal: 'Invalid key size, minimum size is 256 bits' ].	hash := Xtreams.Hash algorithm: vwHashName key: keyBytes.	hash updateFrom: ( self class encodeAsBytes: toSign ).	^ hash finish</body>

<body package="JSONWebTokens">verifyClaims: expectedClaims 	" Raises an error if the claims cannot be verified. "	| now |	now := Timestamp nowUTC .	self expiry ifNotNil: 		[: expiry |			expiry &lt;= now				ifTrue: [ TokenError raiseSignal: 'Token is expired (expiry date: ', expiry displayString, ' UTC)' ]		].	self notBefore ifNotNil: 		[: notBefore |			notBefore &gt; now				ifTrue: [ TokenError raiseSignal: 'Token may not be used yet (not before date: ', notBefore displayString, ' UTC)' ]		].	expectedClaims notNil 		ifTrue: 		[	expectedClaims keysAndValuesDo: 				[: claimName : expectedValue | | actualValue |					actualValue := self payloadAt: claimName ifAbsent: [ nil ].					actualValue = expectedValue 						ifFalse: 						[	TokenError raiseSignal: ( 'Token mismatch for claim "&lt;1s&gt;"' expandMacrosWith: claimName )						]				]		].</body>

<body package="JSONWebTokens">verifyWithPublicKey: publicKey algorithm: hashID padding: paddingName 	" For public keys. Does not check claims. "	| verified certificate hashBytes |	hashBytes := self hash: self messageToSign hashID: hashID.	certificate := self readCertificateFrom: publicKey.	verified :=		[ certificate jwtVerify: self signature of: hashBytes hash: hashID padding: paddingName ] 			on: Error			do: [: ex | TokenError raiseSignal: 'Verify failed: ' , ex description ].	verified 		ifFalse: [ self raiseInvalidSignature ].</body>

<body package="JSONWebTokens">verifyWithSecretKey: secretKey algorithm: algorithmName 	" For symmetric keys. Does not check claims. "	| toSign expectedSignature |	toSign := self messageToSign.	expectedSignature := self sign: toSign key: secretKey algorithm: algorithmName.	self signature = expectedSignature 		ifFalse: [ self raiseInvalidSignature ].</body>
</methods>

<methods>
<class-id>JWT.Token</class-id> <category>accessing</category>

<body package="JSONWebTokens">header	^ header</body>

<body package="JSONWebTokens">header: aStringOrObject 	header := aStringOrObject isCharacters 			ifTrue: [ aStringOrObject ]			ifFalse: 			[					[ JSON.Json render: aStringOrObject ] 					on: JSON.JsonSyntaxError					do: [: ex | TokenError raiseSignal: 'Header cannot be represented as JSON' ]			].	headerObject := nil.</body>

<body package="JSONWebTokens">headerAt: aKey ifAbsent: ifAbsentBlock	^ self headerObject at: aKey asString ifAbsent: ifAbsentBlock</body>

<body package="JSONWebTokens">headerAt: aKey put: aValue	| modifiedObject |	modifiedObject := self headerObject copy.	modifiedObject at: aKey asString put: aValue.	self header: modifiedObject</body>

<body package="JSONWebTokens">headerObject	^ headerObject ifNil: 		[	headerObject := self cacheObjectFromJson: self header		]</body>

<body package="JSONWebTokens">payload	^ payload</body>

<body package="JSONWebTokens">payload: aStringOrObject 	payload := aStringOrObject isCharacters 			ifTrue: [ aStringOrObject ]			ifFalse: 			[					[ JSON.Json render: aStringOrObject ] 					on: JSON.JsonSyntaxError					do: [: ex | TokenError raiseSignal: 'Payload cannot be represented as JSON' ]			].	payloadObject := nil.</body>

<body package="JSONWebTokens">payloadAt: aKey ifAbsent: ifAbsentBlock	^ self payloadObject at: aKey asString ifAbsent: ifAbsentBlock</body>

<body package="JSONWebTokens">payloadAt: aKey put: aValue	| modifiedObject |	modifiedObject := self payloadObject copy.	modifiedObject at: aKey asString put: aValue.	self payload: modifiedObject</body>

<body package="JSONWebTokens">payloadObject	^ payloadObject ifNil: 		[	payloadObject := self cacheObjectFromJson: self payload		]</body>

<body package="JSONWebTokens">signature	^ signature</body>

<body package="JSONWebTokens">signature: aSignature 	signature := aSignature.</body>
</methods>

<methods>
<class-id>JWT.Token</class-id> <category>accessing - claims</category>

<body package="JSONWebTokens">expiry	^ ( self payloadAt: self class keyExpiry ifAbsent: [ nil ]) 		ifNotNil: [: timestampValue | Timestamp fromJwtValue: timestampValue ]</body>

<body package="JSONWebTokens">expiry: anUTCTimestamp	^ self payloadAt: self class keyExpiry put: anUTCTimestamp jwtValue</body>

<body package="JSONWebTokens">expiryValue	" raw integer value "	^ self payloadAt: self class keyExpiry ifAbsent: [ nil ]</body>

<body package="JSONWebTokens">issuedAt	^ ( self payloadAt: self class keyIssuedAt ifAbsent: [ nil ]) 		ifNotNil: [: timestampValue | Timestamp fromJwtValue: timestampValue ]</body>

<body package="JSONWebTokens">issuedAt: anUTCTimestamp	^ self payloadAt: self class keyIssuedAt put: anUTCTimestamp jwtValue</body>

<body package="JSONWebTokens">issuer	^ self payloadAt: self class keyIssuer ifAbsent: [ nil ]</body>

<body package="JSONWebTokens">issuer: anIssuer	self payloadAt: self class keyIssuer put: anIssuer</body>

<body package="JSONWebTokens">notBefore	^ ( self payloadAt: self class keyNotBefore ifAbsent: [ nil ]) 		ifNotNil: [: timestampValue | Timestamp fromJwtValue: timestampValue ]</body>

<body package="JSONWebTokens">notBefore: anUTCTimestamp	^ self payloadAt: self class notBefore put: anUTCTimestamp jwtValue</body>

<body package="JSONWebTokens">subject	^ self payloadAt: self class keySubject ifAbsent: [ nil ]</body>

<body package="JSONWebTokens">subject: aSubject	self payloadAt: self class keySubject put: aSubject</body>
</methods>

<methods>
<class-id>JWT.Token</class-id> <category>api</category>

<body package="JSONWebTokens">renewExpiry: renewDuration 	" Update the expiry. Modifies the payload, so the token must be signed again afterwards.	Does not update if the current expiry is later than the renew expiry.	Returns true if the expiry was updated "	| newExpiry expiry |	newExpiry := Timestamp nowUTC + renewDuration.	expiry := self expiry.	( expiry notNil and: [ expiry &gt; newExpiry ]) 		ifTrue: [ ^ false ].	self payloadAt: self class keyExpiry put: newExpiry jwtValue.	^ true</body>

<body package="JSONWebTokens">signWithKey: key 	" Uses the mandatory HMAC SHA-256 algorithm "	^ self signWithKey: key algorithm: self defaultAlgorithm</body>

<body package="JSONWebTokens">signWithKey: key algorithm: algorithmName 	" Returns the encoded, signed token.	Key can either be a byte array or a base64url encoded string. "	| toSign newSignature |	self headerAt: self class keyAlgorithm put: algorithmName.	self headerAt: self class keyType put: self class tokenType.	toSign := self messageToSign.	newSignature := self sign: toSign key: key algorithm: algorithmName.	self signature: newSignature.	^ toSign , '.' , ( self class encodeBytes: newSignature )</body>

<body package="JSONWebTokens">verifyWithKey: key 	" Uses the mandatory HMAC SHA-256 algorithm "	self verifyWithKey: key algorithm: self defaultAlgorithm</body>

<body package="JSONWebTokens">verifyWithKey: key algorithm: algorithmName 	self verifyWithKey: key algorithm: algorithmName claims: nil</body>

<body package="JSONWebTokens">verifyWithKey: key algorithm: algorithmName claims: expectedClaims 	" Raises an error if the token cannot be verified.		The algorithm has to be supplied, see 		https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries "	| pragma |	pragma := ( Pragma allNamed: #verify: in: self class ) 			detect: [: p | ( p argumentAt: 1 ) = algorithmName ]			ifNone: [ TokenError raiseSignal: ( 'Unsupported algorithm: &lt;1s&gt;' expandMacrosWith: algorithmName )].	self perform: pragma selector with: key.	self verifyClaims: expectedClaims.</body>

<body package="JSONWebTokens">verifyWithKey: key claims: expectedClaims 	" Uses the mandatory HMAC SHA-256 algorithm "	self verifyWithKey: key algorithm: self defaultAlgorithm claims: expectedClaims</body>
</methods>

<methods>
<class-id>JWT.Token</class-id> <category>accessing - header</category>

<body package="JSONWebTokens">algorithm	" Note: Never use this value for verification		https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries "	^ self headerAt: self class keyAlgorithm ifAbsent: [ nil ]</body>

<body package="JSONWebTokens">keyId	^ self headerAt: self class keyId ifAbsent: [ nil ]</body>

<body package="JSONWebTokens">keyId: aString	self headerAt: self class keyId put: aString</body>

<body package="JSONWebTokens">type	" should be 'JWT' "	^ self headerAt: self class keyType ifAbsent: [ nil ]</body>
</methods>

<methods>
<class-id>JWT.Token</class-id> <category>printing</category>

<body package="JSONWebTokens">printOn: aStream 	super printOn: aStream.	aStream nextPutAll: '('.	aStream nextPutAll: ( self algorithm ifNil: [ 'no algorithm' ]).	aStream nextPutAll: ', '.	self expiry 		ifNotNil: 		[: exp |			aStream nextPutAll: 'valid until '.			exp printOn: aStream		]		ifNil: [ aStream nextPutAll: 'no expiry date' ].	aStream nextPutAll: ')'.</body>
</methods>

<methods>
<class-id>JWT.Token class</class-id> <category>private</category>

<body package="JSONWebTokens">decodeAsBytes: aString	" Decodes a base64url-encoded string.	Returns bytes.	See RFC 7515 ( Base64url Encoding)  "		| replacements base64String stream output byte base64DecodedBytes |	replacements := Dictionary new.	replacements at: $-  put: $+ .	replacements at: $_  put: $/ .	base64String := aString collect: [ : char | replacements at: char ifAbsent: [ char ]].	stream := (base64String asByteArray withEncoding: #base64) readStream.	output := ( ByteArray new: aString size ) writeStream.	[		[ (byte := stream next) notNil ] whileTrue: [ output nextPut: byte ].	] on: Error do: [ TokenError raiseSignal: 'Token base64url decoding failed' ].	output close.	base64DecodedBytes := output contents.	^ base64DecodedBytes</body>

<body package="JSONWebTokens">decodeAsString: aString	" Decodes a base64url-utf8-encoded string.	Returns a string.	See RFC 7515 ( Base64url Encoding)  "		^ (self decodeAsBytes: aString) asStringEncoding: #utf8</body>

<body package="JSONWebTokens">encodeAsBytes: aByteString	^ aByteString asByteArrayEncoding: #utf8</body>

<body package="JSONWebTokens">encodeBytes: someBytes 	" Returns a base64url-encoded string.	See RFC 7515 ( Base64url Encoding)  "	| output replacements encoded i |	output := ( ByteArray new withEncoding: #base64 ) writeStream.	someBytes do: [: byte | output nextPut: ( Character value: byte )].	output close.	replacements := Dictionary new.	replacements at: $+ put: $-.	replacements at: $/ put: $_.	encoded := output encodedContents asByteString 			collect: [: byte | replacements at: byte ifAbsent: [ byte ]].	^ ( encoded notEmpty and: [ encoded last = $= ]) 		ifTrue: 		[	i := encoded size - 1.			[( encoded at: i ) = $= ] whileTrue: [ i := i - 1 ].			i &lt; 1 				ifTrue: [ TokenError raiseSignal: 'base64url encoding failed' ].			encoded copyFrom: 1 to: i		]		ifFalse: [ encoded ]</body>

<body package="JSONWebTokens">encodeString: aString 	" Returns a base64url-utf8-encoded string.	See RFC 7515 ( Base64url Encoding)  "	^ self encodeBytes: ( self encodeAsBytes: aString )</body>

<body package="JSONWebTokens">keyForPublicClaim: claimName	" public claims should use a namespace "	^ 'http://www.i-views.com/jwt/', claimName</body>
</methods>

<methods>
<class-id>JWT.Token class</class-id> <category>instance creation</category>

<body package="JSONWebTokens">fromEncodedToken: base64urlEncodedToken 	| stream header payload signature decodedPayload decodedHeader decodedSignature |	stream := base64urlEncodedToken readStream.	header := stream upTo: $..	stream atEnd 		ifTrue: [ TokenError raiseSignal: 'Invalid token (&lt;header&gt;.&lt;payload&gt;.&lt;signature&gt; expected)' ].	payload := stream upTo: $..	stream atEnd 		ifTrue: [ TokenError raiseSignal: 'Invalid token (&lt;header&gt;.&lt;payload&gt;.&lt;signature&gt; expected)' ].	signature := stream upToEnd.	[	decodedPayload := self decodeAsString: payload.		decodedHeader := self decodeAsString: header.		decodedSignature := self decodeAsBytes: signature	] on: Error do: [: ex | TokenError raiseSignal: 'Invalid token (base64url decoding failed)' ].	^ self new		payload: decodedPayload;		header: decodedHeader;		signature: decodedSignature;		yourself</body>

<body package="JSONWebTokens">payload: aStringOrObject	^ self new payload: aStringOrObject; yourself</body>
</methods>

<methods>
<class-id>JWT.Token class</class-id> <category>accessing</category>

<body package="JSONWebTokens">defaultAlgorithm	^ 'HS256'</body>

<body package="JSONWebTokens">defaultExpiryInterval	^ 24 hours</body>

<body package="JSONWebTokens">defaultKeyLength	^ 256</body>

<body package="JSONWebTokens">keyAlgorithm	^ 'alg'</body>

<body package="JSONWebTokens">keyExpiry	^ 'exp'</body>

<body package="JSONWebTokens">keyId	^ 'kid'</body>

<body package="JSONWebTokens">keyIssuedAt	^ 'iat'</body>

<body package="JSONWebTokens">keyIssuer	^ 'iss'</body>

<body package="JSONWebTokens">keyNotBefore	^ 'nbf'</body>

<body package="JSONWebTokens">keySubject	^ 'sub'</body>

<body package="JSONWebTokens">keyType	^ 'typ'</body>

<body package="JSONWebTokens">tokenType	^ 'JWT'</body>
</methods>

<methods>
<class-id>Security.X509.X509Object</class-id> <category>accessing</category>

<body package="JSONWebTokens">jwtVerify: sig of: digestBytes hash: hashID padding: paddingID	JWT.TokenError raiseSignal: 'Key must be a certificate'</body>
</methods>

<methods>
<class-id>Core.Timestamp class</class-id> <category>instance creation</category>

<body package="JSONWebTokens">fromJwtValue: timestampValue 	" See RFC 7519 "	timestampValue isInteger 		ifFalse: 		[	JWT.TokenError raiseSignal: 'Invalid JWT timestamp value: ' , timestampValue displayString		].	^ self fromSeconds: timestampValue + self jwtOffset</body>
</methods>

<methods>
<class-id>Security.X509.X509RSAPrivateKey</class-id> <category>accessing</category>

<body package="JSONWebTokens">jwtSign: toSign hash: hashID padding: paddingName 	^ self getKey sign: toSign hash: hashID asUppercase padding: paddingName asUppercase</body>
</methods>

<methods>
<class-id>Security.X509.Certificate</class-id> <category>accessing</category>

<body package="JSONWebTokens">jwtVerify: sig of: digestBytes hash: hashID padding: paddingID	^ self publicKey getKey verify: sig of: digestBytes hash: hashID asUppercase padding: paddingID asUppercase</body>
</methods>

<methods>
<class-id>Core.Timestamp class</class-id> <category>converting</category>

<body package="JSONWebTokens">jwtOffset	" See RFC 7519  "	^ 2177452800</body>
</methods>

<methods>
<class-id>Security.X509.X509Object</class-id> <category>accessing</category>

<body package="JSONWebTokens">jwtSign: toSign hash: hashID padding: paddingName 	JWT.TokenError raiseSignal: 'Key must be a private key'</body>
</methods>

<methods>
<class-id>Core.Timestamp</class-id> <category>conversion</category>

<body package="JSONWebTokens">jwtValue	" See RFC 7519 	Assume that this is a UTC timestamp, so do not convert local time "		 ^ self asSeconds - self class jwtOffset</body>
</methods>

<do-it>"Imported Classes:"</do-it>

<do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it>

<class>
<name>Object</name>
<environment>Core</environment>
<super></super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Kernel-Objects</category>
<attributes>
<package>Kernel-Objects</package>
</attributes>
</class>

<class>
<name>X509Object</name>
<environment>Security.X509</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Security-Certificates</category>
<attributes>
<package>X509</package>
</attributes>
</class>

<class>
<name>Error</name>
<environment>Core</environment>
<super>Core.Exception</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Kernel-Exception Handling</category>
<attributes>
<package>Kernel-Exception Handling</package>
</attributes>
</class>

<class>
<name>X509RSAPrivateKey</name>
<environment>Security.X509</environment>
<super>Security.X509.X509PrivateKey</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>version d n e p q exponent1 exponent2 coefficient </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Security-Certificates</category>
<attributes>
<package>X509</package>
</attributes>
</class>

<class>
<name>HttpAuthentication</name>
<environment>Net</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>authChallenge state pathString authPolicy authValue </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Net-HTTP-Support</category>
<attributes>
<package>HTTP</package>
</attributes>
</class>

<class>
<name>Certificate</name>
<environment>Security.X509</environment>
<super>Security.X509.X509Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>encoding tbsCertificate signatureAlgorithm signatureValue signature </inst-vars>
<class-inst-vars></class-inst-vars>
<imports>
			private Protocols.*
			</imports>
<category>Security-Certificates</category>
<attributes>
<package>X509</package>
</attributes>
</class>

<class>
<name>Timestamp</name>
<environment>Core</environment>
<super>Core.Magnitude</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>year month day hours minutes seconds milliseconds partialNanosecond </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>Magnitude-General</category>
<attributes>
<package>Magnitude-General</package>
</attributes>
</class>

</st-source>
